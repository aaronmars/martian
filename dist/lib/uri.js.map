{"version":3,"names":[],"mappings":"","sources":["lib/uri.js"],"sourcesContent":["/**\n * Martian - Core JavaScript API for MindTouch\n *\n * Copyright (c) 2015 MindTouch Inc.\n * www.mindtouch.com  oss@mindtouch.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {UriParser} from './uriParser';\nimport {stringUtility} from './stringUtility';\nexport class Uri {\n    constructor(url = '') {\n        this.parsedUrl = new UriParser(url);\n    }\n    get protocol() {\n        return this.parsedUrl.protocol;\n    }\n    get origin() {\n        return this.parsedUrl.origin;\n    }\n    removeQueryParam(key) {\n        this.parsedUrl.searchParams.delete(key);\n        return this;\n    }\n    addQueryParam(key, value) {\n        this.parsedUrl.searchParams.append(key, encodeURIComponent(value));\n        return this;\n    }\n    addQueryParams(queryMap) {\n        Object.keys(queryMap).forEach((key) => {\n            this.addQueryParam(key, queryMap[key]);\n        });\n        return this;\n    }\n    addSegments(...segments) {\n        let path = '';\n        segments.forEach((segment) => {\n            if(Array.isArray(segment)) {\n                segment.forEach((arraySegment) => {\n                    arraySegment = stringUtility.leftTrim(arraySegment, '/');\n                    path = `${path}/${arraySegment}`;\n                });\n            } else {\n                segment = stringUtility.leftTrim(segment, '/');\n                path = `${path}/${segment}`;\n            }\n        });\n        let pathName = this.parsedUrl.pathname;\n        if(pathName === '/') {\n            pathName = '';\n        }\n        this.parsedUrl.pathname = `${pathName}${path}`;\n        return this;\n    }\n    toString() {\n        return this.parsedUrl.toString();\n    }\n}\n"],"file":"lib/uri.js","sourceRoot":"/source/"}
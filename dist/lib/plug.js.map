{"version":3,"names":[],"mappings":"","sources":["lib/plug.js"],"sourcesContent":["/**\n * Martian - Core JavaScript API for MindTouch\n *\n * Copyright (c) 2015 MindTouch Inc.\n * www.mindtouch.com  oss@mindtouch.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Settings} from './settings';\nimport {Uri} from './uri';\nimport {XhrError} from '../errors/xhrError';\nfunction _handleHttpError(xhr) {\n    return new Promise((resolve, reject) => {\n\n        // Throw for all non-2xx status codes, except for 304\n        if((xhr.status < 200 || xhr.status >= 300) && xhr.status !== 304) {\n            reject(new XhrError(xhr));\n        } else {\n            resolve(xhr);\n        }\n    });\n}\nfunction _getText(xhr) {\n    return Promise.resolve(xhr.responseText || '');\n}\nfunction _doRequest(params) {\n    return new Promise((resolve, reject) => {\n        let xhr = new XMLHttpRequest();\n\n        // server will only respond with Access-Control-Allow-Credentials if valid developer token is provided\n        xhr.withCredentials = true;\n        let requestParams = {\n            _: Date.now(),\n            origin: 'mt-web' // TODO: F1 req from settings module after 20150820\n        };\n        if(this.parseJson) {\n            requestParams['dream.out.format'] = 'json';\n        }\n        let url = new Uri(this.withParams(requestParams).getUrl());\n        xhr.open(params.verb, url.toString());\n        xhr.setRequestHeader('X-Deki-Client', 'mindtouch-martian');\n\n        // X-Deki-Requested-With (required for web widgets same-origin xhr)\n        let originUrlString = this.settings.get('origin');\n        if(originUrlString && originUrlString !== '') {\n            let originUri = new Uri(originUrlString);\n            if(url.origin === originUri.origin) {\n                xhr.setRequestHeader('X-Deki-Requested-With', 'XMLHttpRequest');\n            }\n        }\n        Object.keys(this.headers).forEach((key) => {\n            xhr.setRequestHeader(key, this.headers[key]);\n        });\n        if('mime' in params) {\n            xhr.setRequestHeader('Content-Type', params.mime);\n        }\n        if(this._timeout) {\n            xhr.timeout = this._timeout;\n        }\n        xhr.onload = () => {\n            resolve(xhr);\n        };\n        xhr.onerror = () => {\n            reject(xhr);\n        };\n        xhr.ontimeout = () => {\n            reject(xhr);\n        };\n        if('value' in params && params.value !== null) {\n            xhr.send(params.value);\n        } else {\n            xhr.send();\n        }\n    });\n}\nexport class Plug {\n    constructor(settings = new Settings(), params = {}) {\n\n        // Initialize the settings\n        this.settings = settings;\n        let url = this.settings.get('host');\n        let token = this.settings.get('token');\n\n        // Initialize the url for this instance\n        let _url = new Uri(url);\n        if('constructionParams' in params) {\n            if('segments' in params.constructionParams) {\n                _url.addSegments(params.constructionParams.segments);\n            }\n            if('query' in params.constructionParams) {\n                _url.addQueryParams(params.constructionParams.query);\n            }\n            if('excludeQuery' in params.constructionParams) {\n                _url.removeQueryParam(params.constructionParams.excludeQuery);\n            }\n            if('timeout' in params.constructionParams) {\n                this._timeout = params.constructionParams.timeout;\n            }\n        } else {\n            params.constructionParams = {};\n        }\n        this.url = _url;\n        this.headers = params.headers || {};\n        if(token && token !== '') {\n            this.headers['X-Deki-Token'] = token;\n        }\n        this.parseJson = params.raw !== true;\n    }\n    getUrl() {\n        return this.url.toString();\n    }\n    getHeaders() {\n        return this.headers;\n    }\n\n    at(...segments) {\n        var values = [];\n        segments.forEach(function(segment) {\n            values.push(segment.toString());\n        });\n        let newSettings = this.settings.clone({ host: this.url.toString() });\n        return new Plug(newSettings, {\n            headers: this.headers,\n            constructionParams: { segments: segments }\n        });\n    }\n    withParam(key, value) {\n        let params = {};\n        params[key] = value;\n        let newSettings = this.settings.clone({ host: this.url.toString() });\n        return new Plug(newSettings, {\n            headers: this.headers,\n            constructionParams: { query: params }\n        });\n    }\n    withParams(values = {}) {\n        let newSettings = this.settings.clone({ host: this.url.toString() });\n        return new Plug(newSettings, {\n            headers: this.headers,\n            constructionParams: { query: values }\n        });\n    }\n    withoutParam(key) {\n        let newSettings = this.settings.clone({ host: this.url.toString() });\n        return new Plug(newSettings, {\n            headers: this.headers,\n            constructionParams: { excludeQuery: key }\n        });\n    }\n    _copyHeaders() {\n        let newHeaders = {};\n        Object.keys(this.headers).forEach((key) => {\n            newHeaders[key] = this.headers[key];\n        });\n        return newHeaders;\n    }\n    withHeader(key, value) {\n        let newHeaders = this._copyHeaders();\n        newHeaders[key] = value;\n        let newSettings = this.settings.clone({ host: this.url.toString() });\n        return new Plug(newSettings, { headers: newHeaders });\n    }\n    withHeaders(values) {\n        let newHeaders = this._copyHeaders();\n        Object.keys(values).forEach((key) => {\n            newHeaders[key] = values[key];\n        });\n        let newSettings = this.settings.clone({ host: this.url.toString() });\n        return new Plug(newSettings, { headers: newHeaders });\n    }\n    withoutHeader(key) {\n        let newHeaders = this._copyHeaders();\n        delete newHeaders[key];\n        let newSettings = this.settings.clone({ host: this.url.toString() });\n        return new Plug(newSettings, { headers: newHeaders });\n    }\n    get(verb = 'GET') {\n        return this.getRaw(verb).then(_handleHttpError).then(_getText);\n    }\n    getRaw(verb = 'GET') {\n        return _doRequest.call(this, { verb: verb });\n    }\n    post(value, mime) {\n        return this.postRaw(value, mime).then(_handleHttpError).then(_getText);\n    }\n    postRaw(value, mime) {\n        return _doRequest.call(this, { verb: 'POST', value: value, mime: mime });\n    }\n    put(value, mime) {\n        return this.withHeader('X-HTTP-Method-Override', 'PUT').post(value, mime);\n    }\n    putRaw(value, mime) {\n        return this.withHeader('X-HTTP-Method-Override', 'PUT').postRaw(value, mime);\n    }\n    head() {\n        return this.get('HEAD');\n    }\n    headRaw() {\n        return this.getRaw('HEAD');\n    }\n    options() {\n        return this.get('OPTIONS');\n    }\n    optionsRaw() {\n        return this.getRaw('OPTIONS');\n    }\n    del() {\n        return this.withHeader('X-HTTP-Method-Override', 'DELETE').post(null, null);\n    }\n    delRaw() {\n        return this.withHeader('X-HTTP-Method-Override', 'DELETE').postRaw(null, null);\n    }\n    delete() {\n        return this.del();\n    }\n}\n"],"file":"lib/plug.js","sourceRoot":"/source/"}
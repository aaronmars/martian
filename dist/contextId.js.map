{"version":3,"names":[],"mappings":"","sources":["contextId.js"],"sourcesContent":["/**\n * Martian - Core JavaScript API for MindTouch\n *\n * Copyright (c) 2015 MindTouch Inc.\n * www.mindtouch.com  oss@mindtouch.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Plug} from './lib/plug';\nimport {contextIdsModel} from './models/contextIds.model';\nimport {contextIdModel} from './models/contextId.model';\nimport {contextMapsModel} from './models/contextMaps.model';\nimport {contextMapModel} from './models/contextMap.model';\n\n/**\n * A class to manage individual Context IDs.\n */\nexport class ContextDefinition {\n\n    /**\n     * Create a ContextDefinition.\n     * @param {String} id - The ID of the context definition.\n     * @param {Settings} [settings] - The {@link Settings} information to use in construction. If not supplied, the default settings are used.\n     */\n    constructor(id, settings) {\n        if(!id) {\n            throw new Error('an ID must be supplied to create a new ContextDefinition');\n        }\n        this.id = id;\n        this.plug = new Plug(settings).at('@api', 'deki', 'contexts', id);\n    }\n\n    /**\n     * Get the Context ID information from the API.\n     * @returns {Promise.<contextIdModel>} - A promise that, when resolved, yields a {@link contextIdModel} object.\n     */\n    getInfo() {\n        return this.plug.get().then(contextIdModel.parse);\n    }\n\n    /**\n     * Set or overwrite the description of the Context ID\n     * @param {String} description - The new\n     * @returns {Promise.<contextIdModel>} - A promise that, when resolved, yields a contextIdModel object.\n     */\n    updateDescription(description = '') {\n        let updateRequest = `<context><id>${this.id}</id><description>${description}</description></context>`;\n        return this.plug.put(updateRequest, 'application/xml; charset=utf-8').then(contextIdModel.parse);\n    }\n\n    /**\n     * Remove this Context ID from the system.\n     * @returns {Promise} - A Promise that, when resolved, indicates a successful deletion of the Context ID.\n     */\n    delete() {\n        return this.plug.delete();\n    }\n}\n\n/**\n * A class to manage a mapping between a {@link ContextDefinition} and a page on a MindTouch site; taking language into account.\n */\nexport class ContextMap {\n\n    /**\n     * Construct a new ContextMap\n     * @param {String} language - The language of the mapping.\n     * @param {String} id - The ID of the associated {@link ContextDefinition}.\n     * @param {Settings} [settings] - The {@link Settings} information to use in construction. If not supplied, the default settings are used.\n     */\n    constructor(language, id, settings) {\n        if(!id || !language) {\n            throw new Error('an ID and language must be supplied to create a new ContextMap');\n        }\n        this.id = id;\n        this.language = language;\n        this.plug = new Plug(settings).at('@api', 'deki', 'contextmaps', language, id).withParam('verbose', 'true');\n    }\n\n    /**\n     * Gets the information for the Context Mapping.\n     * @returns {Promise.<contextMapModel>} - A promise that, when resolved, yields a {@link contextMapModel} object.\n     */\n    getInfo() {\n        return this.plug.get().then(contextMapModel.parse);\n    }\n\n    /**\n     * Sets or changes the page ID for the Context ID mapping.\n     * @param {Number} pageId - The page ID to use for the Context ID mapping.\n     * @returns {Promise.<contextMapModel>} - A promise that, when resolved, yields a {@link contextMapModel} object.\n     */\n    update(pageId) {\n        if(!pageId) {\n            return Promise.reject(new Error('a page ID must be supplied in order to update a mapping'));\n        }\n        let updateRequest = `<contextmap><id>${this.id}</id><pageid>${pageId}</pageid><language>${this.language}</language></contextmap>`;\n        return this.plug.put(updateRequest, 'application/xml; charset=utf-8').then(contextMapModel.parse);\n    }\n\n    /**\n     * Removes a mapping between a Context ID and an associated page.\n     * @returns {Promise} - A Promise that, when resolved, indicates a successful removal of the mapping.\n     */\n    remove() {\n        return this.plug.delete();\n    }\n}\n\n/**\n * A class to manage the Context ID subsystem for access to the Context IDs and Context ID Mappings.\n */\nexport class ContextIdManager {\n\n    /**\n     * Construct a new ContextIdManager.\n     * @param {Settings} [settings] - The {@link Settings} information to use in construction. If not supplied, the default settings are used.\n     */\n    constructor(settings) {\n        this.mapsPlug = new Plug(settings).at('@api', 'deki', 'contextmaps').withParam('verbose', 'true');\n        this.definitionsPlug = new Plug(settings).at('@api', 'deki', 'contexts');\n        this.settings = settings;\n    }\n\n    /**\n     * Get all of the Context ID Mappings that are defined.\n     * @returns {Promise.<contextMapsModel>} - A promise that, when resolved, yields a {@link contextMapsModel} object.\n     */\n    getMaps() {\n        return this.mapsPlug.get().then(contextMapsModel.parse);\n    }\n\n    /**\n     * Get all of the Context ID Definitions that are defined.\n     * @returns {Promise.<contextIdsModel>} - A promise that, when resolved, yields a {@link contextIdsModel} object.\n     */\n    getDefinitions() {\n        return this.definitionsPlug.get().then(contextIdsModel.parse);\n    }\n\n    /**\n     * Add a new Context ID Definition to the system.\n     * @param {String} id - The ID to use for the new definition.\n     * @param {String} [description=''] - The initial description to set for the definition.\n     * @returns {Promise.<contextIdModel>} - A promise that, when resolved, yields a {@link contextIdModel} object.\n     */\n    addDefinition(id, description = '') {\n        if(!id) {\n            return Promise.reject(new Error('an ID must be supplied to add a definition'));\n        }\n        let addRequest = `<contexts><context><id>${id}</id><description>${description}</description></context></contexts>`;\n        return this.definitionsPlug.post(addRequest, 'application/xml; charset=utf-8').then(contextIdModel.parse);\n    }\n\n    /**\n     * Get a new {@link ContextDefinition} object for the supplied ID.\n     * @param {String} id - The ID of the Context Definition to create.\n     * @returns {ContextDefinition} - A new {@link ContextDefinition} object.\n     */\n    getDefinition(id) {\n        return new ContextDefinition(id, this.settings);\n    }\n\n    /**\n     * Get a new {@link ContextMap} object for the supplied language and ID combination.\n     * @param {String} language - The language code to use to identify the mapping.\n     * @param {String} id - The Context ID identifier to use to identify the mapping.\n     * @returns {ContextMap} - A new {@link ContextMap} object.\n     */\n    getMap(language, id) {\n        return new ContextMap(language, id, this.settings);\n    }\n}\n"],"file":"contextId.js","sourceRoot":"/source/"}
{"version":3,"names":[],"mappings":"","sources":["pageProperty.js"],"sourcesContent":["/**\n * Martian - Core JavaScript API for MindTouch\n *\n * Copyright (c) 2015 MindTouch Inc.\n * www.mindtouch.com  oss@mindtouch.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Plug} from './lib/plug';\nimport {utility} from './lib/utility';\nimport {pagePropertiesModel} from './models/pageProperties.model';\nimport {pagePropertyModel} from './models/pageProperty.model';\n\n/**\n * A class for managing the properties of a page.\n */\nexport class PageProperty {\n\n    /**\n     * Construct a new PageProperty object.\n     * @param {Number|String} [id='home'] The numeric page ID or the page path.\n     * @param {Settings} [settings] - The {@link Settings} information to use in construction. If not supplied, the default settings are used.\n     */\n    constructor(id = 'home', settings) {\n        this._id = utility.getResourceId(id, 'home');\n        this._plug = new Plug(settings).at('@api', 'deki', 'pages', this._id, 'properties');\n    }\n\n    /**\n     * Get all of the properties of the page.\n     * @param {Array} [names=[]] - An array of names to fetch so that the results are filtered.\n     * @returns {Promise.<pagePropertiesModel>} - A Promise that, when resolved, yields a {@link pagePropertiesModel} object that contains the listing of properties.\n     */\n    getProperties(names = []) {\n        if(!Array.isArray(names)) {\n            return Promise.reject(new Error('The property names must be an array'));\n        }\n        let plug = this._plug;\n        if(names.length > 0) {\n            plug = plug.withParams({ names: names.join(',') });\n        }\n        return plug.get().then(pagePropertiesModel.parse);\n    }\n\n    /**\n     * Gets a single page property by property key.\n     * @param {String} key - The key of the property to fetch.\n     * @returns {Promise.<pagePropertyModel>} - A Promise that, when resolved, yields a {@link pagePropertyModel} object that contains the property information.\n     */\n    getProperty(key) {\n        if(!key) {\n            return Promise.reject(new Error('Attempting to fetch a page property without providing a property key'));\n        }\n        return this._plug.at(encodeURIComponent(key), 'info').get().then(pagePropertyModel.parse);\n    }\n\n    /**\n     * Get the contents of a page property.\n     * @param {String} key - The key of the property to fetch.\n     * @returns {Promise} - A Promise that, when resolved, yields the property contents.  The property can be of any type allowed by the MindTouch property subsystem.\n     */\n    getPropertyContents(key) {\n        if(!key) {\n            return Promise.reject(new Error('Attempting to fetch a page property contents without providing a property key'));\n        }\n        return this._plug.at(encodeURIComponent(key)).get();\n    }\n\n    /**\n     * Get a listing of page properties for a hierarchy of pages.\n     * @param {String} key - The key of the property to fetch.\n     * @param {Number} [depth=1] - Between 0 and 2 levels deep in the search are allowed. If depth is 1 or 2, the names argument only can be a single property to be looked up, and no wildcards are allowed.\n     * @returns {Promise} - A Promise that, when resolved, yields the listing of the properties.\n     */\n    getPropertyForChildren(key, depth = 1) {\n        if(!key) {\n            return Promise.reject(new Error('Attempting to fetch properties for children without providing a property key'));\n        }\n        return this._plug.withParams({ depth: depth, names: key }).get();\n    }\n}\n"],"file":"pageProperty.js","sourceRoot":"/source/"}
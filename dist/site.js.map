{"version":3,"names":[],"mappings":"","sources":["site.js"],"sourcesContent":["/**\n * Martian - Core JavaScript API for MindTouch\n *\n * Copyright (c) 2015 MindTouch Inc.\n * www.mindtouch.com  oss@mindtouch.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {utility} from './lib/utility';\nimport {stringUtility} from './lib/stringUtility';\nimport {Plug} from './lib/plug';\nimport {searchModel} from './models/search.model';\nfunction _buildSearchConstraints(params) {\n    let constraints = [];\n    params.namespace = 'main';\n    constraints.push('+namespace:' + utility.searchEscape(params.namespace));\n    if('path' in params) {\n        let path = params.path;\n        if(stringUtility.startsWith(path, '/')) {\n            path = stringUtility.leftTrim(path, '/');\n        }\n        constraints.push('+path.ancestor:' + utility.searchEscape(path));\n    }\n    if('tags' in params) {\n        var tags = params.tags;\n        if(typeof tags === 'string' && (tags)) {\n            tags = tags.split(',');\n        }\n        tags.forEach((tag) => {\n            constraints.push('+tag:\"' + utility.searchEscape(tag) + '\"');\n        });\n    }\n    if('type' in params) {\n        var types = params.type;\n        if(typeof types === 'string' && (types)) {\n            types = types.split(',');\n        }\n        types.forEach((type) => {\n            constraints.push('+type:' + utility.searchEscape(type));\n        });\n    }\n    return '+(' + constraints.join(' ') + ')';\n}\n\n/**\n * A class for administering aspects of a MindTouch site.\n */\nexport class Site {\n\n    /**\n     * Construct a Site object.\n     * @param {Settings} [settings] - The {@link Settings} information to use in construction. If not supplied, the default settings are used.\n     */\n    constructor(settings) {\n        this.plug = new Plug(settings).at('@api', 'deki', 'site');\n    }\n\n    /**\n     * Get the localized string corresponding to the supplied resource key.\n     * @param {Object} options - Options to direct the fetching of the localized string.\n     * @param {String} options.key - The key that identifies the string to fetch.\n     * @param {String} [options.lang] - A language code used to fetch the string in a specific language.  If not supplied, the current system language will be used.\n     * @returns {Promise.<String>} - A Promise that, when resolved, yields the fetched string.\n     */\n    getResourceString(options = {}) {\n        if(!('key' in options)) {\n            return Promise.reject('No resource key was supplied');\n        }\n        let locPlug = this.plug.at('localization', options.key);\n        if('lang' in options) {\n            locPlug = locPlug.withParam('lang', options.lang);\n        }\n        return locPlug.get();\n    }\n\n    /**\n     * Perform a search across the site.\n     * This function takes a single parameter with the following options.\n     * @param {Number} [page=1] The paginated page number offset to return.\n     * @param {Number} [limit=10] - Limit search results to the specified number of items per paginated page.\n     * @param {String} [tags=''] - A comma-separated list of tags to constrain search results to items containing one of the tags.\n     * @param {String} [type=''] - Type or types to filter the results in a comma delimited list.  Valid types: `wiki`, `document`, `image`, `binary`\n     * @param {String} [q=''] - Search keywords or advanced search syntax.\n     * @param {String} [path=''] - A page path to constrain the search results to items located under the specified path.\n     * @param {Boolean} [recommendations=true] - `true` to include recommended search results based off site configuration. `false` to suppress them.\n     * @returns {Promise.<searchModel>} - A Promise that, when resolved, yields the results from the search in a {@link searchModel}.\n     */\n    search({ page: page = 1, limit: limit = 10, tags: tags = '', type: type = '', q: q = '', path: path = '', recommendations = true } = {}) {\n        let constraint = {};\n        if(path !== '') {\n            constraint.path = path;\n        }\n        if(tags !== '') {\n            constraint.tags = tags;\n        }\n        if(type !== '') {\n            constraint.type = type;\n        }\n        let searchParams = {\n            limit: limit,\n            page: page,\n            offset: (parseInt(limit, 10) * (parseInt(page, 10) - 1)),\n            sortBy: '-date,-rank',\n            q: q,\n            summarypath: encodeURI(path),\n            constraint: _buildSearchConstraints(constraint),\n            recommendations: recommendations\n        };\n        return this.plug.at('query').withParams(searchParams).get().then(searchModel.parse);\n    }\n}\n"],"file":"site.js","sourceRoot":"/source/"}
{"version":3,"names":[],"mappings":"","sources":["user.js"],"sourcesContent":["/**\n * Martian - Core JavaScript API for MindTouch\n *\n * Copyright (c) 2015 MindTouch Inc.\n * www.mindtouch.com  oss@mindtouch.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Plug} from './lib/plug';\nimport {utility} from './lib/utility';\nimport {userModel} from './models/user.model';\nimport {userListModel} from './models/userList.model';\n\n/**\n * A class for managing a MindTouch user.\n */\nexport class User {\n\n    /**\n     * Construct a new User object.\n     * @param {Number|String} [id='current'] - The user's numeric ID or username.\n     * @param {Settings} [settings] - The {@link Settings} information to use in construction. If not supplied, the default settings are used.\n     */\n    constructor(id = 'current', settings) {\n        this._id = utility.getResourceId(id, 'current');\n        this._plug = new Plug(settings).at('@api', 'deki', 'users', this._id);\n    }\n\n    /**\n     * Get the user information.\n     * @returns {Promise.<userModel>} - A Promise that, when resolved, returns a {@link userModel} containing the user information.\n     */\n    getInfo() {\n        return this._plug.get().then(userModel.parse);\n    }\n}\n\n/**\n * A class for managing the users on a MindTouch site.\n */\nexport class UserManager {\n\n    /**\n     * Construct a new UserManager object.\n     * @param {Settings} [settings] - The {@link Settings} information to use in construction. If not supplied, the default settings are used.\n     */\n    constructor(settings) {\n        this.settings = settings;\n        this.plug = new Plug(settings).at('@api', 'deki', 'users');\n    }\n\n    /**\n     * Get the currently signed-in user.\n     * @returns {Promise.<userModel>} - A Promise that, when resolved, returns a {@link userModel} containing the current user's information.\n     */\n    getCurrentUser() {\n        return this.plug.at('current').get().then(userModel.parse);\n    }\n\n    /**\n     * Get all of the users.\n     * @returns {Promise.<userListModel>} - A Promise that, when resolved, returns a {@link userListModel} containing the list of users.\n     */\n    getUsers() {\n        return this.plug.get().then(userListModel.parse);\n    }\n\n    /**\n     * Get a listing of users filtered by the supplied constraints\n     * @param {Object} constraints - The various constraints that can be used to filter the user listing.\n     * @param {Number} constraints.groupid - Search for users in a specific group\n     * @param {String} constraints.fullname - Search for users full name starting with supplied text.\n     * @param {Boolean} constraints.active - Search for users by their active status\n     * @param {Number} constraints.authprovider - Return users belonging to given authentication service id\n     * @param {String} constraints.email - Search for users by name and email or part of a name and email\n     * @param {Boolean} constraints.seated - Search for users with or without seats\n     * @param {String} constraints.username - Search for users name starting with supplied text\n     * @param {Number} constraints.roleid - Search for users of a specific role ID.\n     * @param {Number} constraints.limit - Maximum number of items to retrieve. Actual maximum is capped by site setting\n     * @returns {Promise.<userListModel>} - A Promise that, when resolved, returns a {@link userListModel} containing the list of found users.\n     */\n    searchUsers(constraints) {\n        return this.plug.at('search').withParams(constraints).get().then(userListModel.parse);\n    }\n\n    /**\n     * Get a {@see User} object by ID.\n     * @param {Number|String} [id='current'] - The user's numeric ID or username.\n     * @returns {User} - The User object corresponding to the supplied ID.\n     */\n    getUser(id = 'current') {\n        return new User(id, this.settings);\n    }\n}\n"],"file":"user.js","sourceRoot":"/source/"}
{"version":3,"names":[],"mappings":"","sources":["page.js"],"sourcesContent":["/**\n * Martian - Core JavaScript API for MindTouch\n *\n * Copyright (c) 2015 MindTouch Inc.\n * www.mindtouch.com  oss@mindtouch.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Plug} from './lib/plug';\nimport {utility} from './lib/utility';\nimport {PageBase} from './pageBase';\nimport {pageModel} from './models/page.model';\nimport {subpagesModel} from './models/subpages.model';\nimport {pageContentsModel} from './models/pageContents.model';\nimport {pageTreeModel} from './models/pageTree.model';\nimport {pageRatingModel} from './models/pageRating.model';\nimport {pageMoveModel} from './models/pageMove.model';\n\n/**\n * A class for managing a published page.\n */\nexport class Page extends PageBase {\n\n    /**\n     * Construct a new Page.\n     * @param {Number|String} [id='home'] The numeric page ID or the page path.\n     * @param {Settings} [settings] - The {@link Settings} information to use in construction. If not supplied, the default settings are used.\n     */\n    constructor(id = 'home', settings) {\n        super(id);\n        this._plug = new Plug(settings).at('@api', 'deki', 'pages', this._id);\n    }\n\n    /**\n     * Gets the basic page information.\n     * @param {Object} [params] - Additional parameters to direct the API request.\n     * @returns {Promise.<pageModel>} - A Promise that, when resolved, yields a {@link pageModel} containing the basic page information.\n     */\n    getInfo(params = {}) {\n        let infoParams = { exclude: 'revision' };\n        Object.keys(params).forEach((key) => {\n            infoParams[key] = params[key];\n        });\n        return this._plug.at('info').withParams(infoParams).get().then(pageModel.parse);\n    }\n\n    /**\n     * Get the subpages of the page.\n     * @param {Object} [params] - Additional parameters to direct the API request.\n     * @returns {Promise.<subpagesModel>} - A Promise that, when resolved, yields a {@link subpagesModel} containing the basic page information.\n     */\n    getSubpages(params) {\n        return this._plug.at('subpages').withParams(params).get().then(subpagesModel.parse);\n    }\n\n    /**\n     * Get a hierarchy tree based on the current page.\n     * @param {Object} [params] - Additional parameters to direct the API request.\n     * @returns {Promise.<pageTreeModel>} - A Promise that, when resolved, yields a {@link pageTreeModel} containing the basic page information.\n     */\n    getTree(params) {\n        return this._plug.at('tree').withParams(params).get().then(pageTreeModel.parse);\n    }\n\n    /**\n     * Get the hierarchical list of pages IDs from the current page to the home page.\n     * @returns {Promise.<Array>} - The array of hierarchical page IDs.\n     */\n    getTreeIds() {\n        return this._plug.at('tree').withParam('format', 'ids').get().then((idString) => {\n            return idString.split(',').map((id) => {\n                let numId = parseInt(id, 10);\n                if(isNaN(numId)) {\n                    throw new Error('Unable to parse the tree IDs.');\n                }\n                return numId;\n            });\n        }).catch((e) => {\n            return Promise.reject({ message: e.message });\n        });\n    }\n\n    /**\n     * Gets the rating information for the page.\n     * @returns {Promise.<pageRatingModel>} - A Promise that, when resolved, yields a {@link pageRatingModel} containing the rating information.\n     */\n    getRating() {\n        return this._plug.at('ratings').get().then(pageRatingModel.parse);\n    }\n\n    /**\n     * Set the rating for the page.\n     * @param {String} [rating=''] - The new rating for the page.\n     * @param {String} [oldRating=''] - The old rating for the page that is being replaced by {@see rating}.\n     * @returns {Promise.<pageRatingModel>} - A Promise that, when resolved, yields a {@link pageRatingModel} containing the new rating information.\n     */\n    rate(rating = '', oldRating = '') {\n        rating = rating.toString();\n        oldRating = oldRating.toString();\n        if(rating !== '1' && rating !== '0' && rating !== '') {\n            throw new Error('Invalid rating supplied');\n        }\n        if(oldRating !== '1' && oldRating !== '0' && oldRating !== '') {\n            throw new Error('Invalid rating supplied for the old rating');\n        }\n        return this._plug.at('ratings').withParams({ score: rating, previousScore: oldRating }).post(null, utility.textRequestType).then(pageRatingModel.parse);\n    }\n\n    /**\n     * Gets a MindTouch template rendered in the context of the current page, as HTML.\n     * @param {String} path - The template path.\n     * @param {Object} [params] - Additional parameters to direct the API request.\n     * @returns {Promise.<pageContentsModel>} - A Promise that, when resolved, yields the rendered HTML within a {@link pageContentsModel}.\n     */\n    getHtmlTemplate(path, params = {}) {\n        params.pageid = this._id;\n\n        // Double-URL-encode the path and add '=' to the beginning.  This makes\n        //  it a proper page ID to be used in a URI segment.\n        let templatePath = '=' + encodeURIComponent(encodeURIComponent(path));\n        let contentsPlug = new Plug().at('@api', 'deki', 'pages', templatePath, 'contents').withParams(params);\n        return contentsPlug.get().then(pageContentsModel.parse);\n    }\n\n    /**\n     * Move a page to a new location in the hierarchy.\n     * @param {Object} [params] - Additional parameters to direct the API request.\n     * @returns {Promise.<pageMoveModel>} - A Promise that, when resolved, yields a {@link pageMoveModel} containing information regarding the move operation.\n     */\n    move(params = {}) {\n        return this._plug.at('move').withParams(params).post(null, 'text/plain; charset=utf-8').then(pageMoveModel.parse);\n    }\n\n    /**\n     * Using the current page, activates a draft; copying tghe page's content and attachments.\n     * @returns {Promise.<pageModel>} - A Promise that, when resolved, yields a {@link pageModel} containing the page information following the activation.\n     */\n    activateDraft() {\n        return this._plug.at('activate-draft').post().then(pageModel.parse);\n    }\n}\n"],"file":"page.js","sourceRoot":"/source/"}
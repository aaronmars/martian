{"version":3,"names":[],"mappings":"","sources":["draft.js"],"sourcesContent":["/**\n * Martian - Core JavaScript API for MindTouch\n *\n * Copyright (c) 2015 MindTouch Inc.\n * www.mindtouch.com  oss@mindtouch.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Plug} from './lib/plug';\nimport {utility} from './lib/utility';\nimport {PageBase} from './pageBase';\nimport {pageModel} from './models/page.model';\n\n/**\n * A class for managing a single unpublished draft page.\n */\nexport class Draft extends PageBase {\n\n    /**\n     * Construct a Draft object.\n     * @param {Number|String} [id=home] - The id of the draft to construct.\n     * @param {Settings} [settings] - The {@link Settings} information to use in construction. If not supplied, the default settings are used.\n     */\n    constructor(id = 'home', settings) {\n        super(id);\n        this._plug = new Plug(settings).at('@api', 'deki', 'drafts', this._id);\n    }\n\n    /**\n     * Deactivate the current draft and revert to the published page.\n     * @returns {Promise.<pageModel>} - A Promise that, when resolved, yields a {@link pageModel} for the deactivated page.\n     */\n    deactivate() {\n        return this._plug.at('deactivate').post().then(pageModel.parse);\n    }\n\n    /**\n     * Publish the draft.\n     * @returns {Promise} - A Promise that, when resolved, indicates a successful publish operation.\n     */\n    publish() {\n        return this._plug.at('publish').post();\n    }\n}\n\n/**\n * A class for managing unpublished draft pages.\n */\nexport class DraftManager {\n\n    /**\n     * Create a new DraftManager.\n     * @param {Settings} [settings] - The {@link Settings} information to use in construction. If not supplied, the default settings are used.\n     */\n    constructor(settings) {\n        this._settings = settings;\n    }\n\n    /**\n     * Create a new draft on the site where a page does not already exist.\n     * @param {String} newPath - The path of the new draft.\n     * @returns {Promise.<pageModel>} - A Promise that, when resolved, yields a {@link pageModel} for the newly-created draft.\n     */\n    createDraft(newPath) {\n        let plug = new Plug(this._settings).at('@api', 'deki', 'drafts', utility.getResourceId(newPath), 'create');\n        return plug.post().then(pageModel.parse);\n    }\n\n    /**\n     * Fetch a new Draft object by ID.\n     * @param {Number|String} [id=home] - The id of the draft to return.\n     * @returns {Draft} - A new {@link Draft} object.\n     */\n    getDraft(id) {\n        return new Draft(id, this._settings);\n    }\n}\n"],"file":"draft.js","sourceRoot":"/source/"}
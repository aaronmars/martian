{"version":3,"names":[],"mappings":"","sources":["learningPath.js"],"sourcesContent":["/**\n * Martian - Core JavaScript API for MindTouch\n *\n * Copyright (c) 2015 MindTouch Inc.\n * www.mindtouch.com  oss@mindtouch.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Plug} from './lib/plug';\nimport {learningPathModel} from './models/learningPath.model';\nimport {pageModel} from './models/page.model';\nlet maxSummaryCount = 500;\nfunction getSaveXML(data) {\n    let template = `<title>${data.title}</title>\n        <summary>${data.summary}</summary>\n        <category>${data.category}</category>`;\n    if(data.pages && Array.isArray(data.pages)) {\n        data.pages.forEach((page) => {\n            template = `${template}\n                <pages>${page.id}</pages>`;\n        });\n    }\n    template = `<learningpath>${template}</learningpath>`;\n    return template;\n}\nexport class LearningPath {\n\n    // Constructor\n    constructor(name, settings) {\n        this._name = name;\n        this._plug = new Plug(settings).at('@api', 'deki', 'learningpaths', `${name}`);\n    }\n    getInfo() {\n        return this._plug.get().then(learningPathModel.parse);\n    }\n\n    // learning path operations\n    update(content) {\n        if(content.summary && content.summary.length > maxSummaryCount) {\n            content.summary = content.summary.substring(0, maxSummaryCount);\n        }\n\n        // Do this without mustache\n        let XMLData = getSaveXML(content);\n        return this._plug.at(`=${this._name}`).withParam('edittime', content.edittime).post(XMLData, 'application/xml').then(learningPathModel.parse);\n    }\n    remove() {\n        return this._plug.at(`=${this._name}`).del();\n    }\n\n    // Page operations\n    addPage(pageId, editTime) {\n        return this._plug.at(`=${this._name}`, 'pages', pageId).withParam('edittime', editTime).post().then(pageModel.parse);\n    }\n    removePage(pageId, editTime) {\n        return this._plug.at(`=${this._name}`, 'pages', pageId).withParam('edittime', editTime).del();\n    }\n    reorderPage(pageId, afterId, editTime) {\n        return this._plug.at(`=${this._name}`, 'pages', pageId, 'order').withParams({ edittime: editTime, afterId: afterId }).post().then(learningPathModel.parse);\n    }\n}\nexport class LearningPathManager {\n    constructor(settings) {\n        this.settings = settings;\n        this._plug = new Plug(settings).at('@api', 'deki', 'learningpaths');\n    }\n    getLearningPaths() {\n        return this._plug.get().then(learningPathModel.parse);\n    }\n    getLearningPath(name) {\n        return new LearningPath(name, this.settings);\n    }\n    create(data) {\n        if(data.summary.length > maxSummaryCount) {\n            data.summary = data.summary.substring(0, maxSummaryCount);\n        }\n        return this._plug.withParams(data).post().then(learningPathModel.parse);\n    }\n}\n"],"file":"learningPath.js","sourceRoot":"/source/"}
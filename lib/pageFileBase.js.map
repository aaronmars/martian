{"version":3,"names":[],"mappings":"","sources":["pageFileBase.js"],"sourcesContent":["/**\n * Martian - Core JavaScript API for MindTouch\n *\n * Copyright (c) 2015 MindTouch Inc.\n * www.mindtouch.com  oss@mindtouch.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {utility} from './utility/utility';\nimport {fileModel} from './models/file.model';\n\n/**\n * A base class for managing file attachments on both published pages and drafts.  This class can not be instantiated directly.\n */\nexport class PageFileBase {\n    constructor(pageId, filename) {\n        if(this.constructor.name === 'PageFileBase') {\n            throw new TypeError('PageFileBase must not be constructed directly.  Use one of PageFile() or DraftFile()');\n        }\n        this._pageId = utility.getResourceId(pageId, 'home');\n        this._filename = utility.getFilenameId(filename);\n    }\n\n    /**\n     * Get the URI for direct access to the file attachment.\n     * @returns {String} - The file URI.\n     */\n    getFileUri() {\n        return this._plug.getUrl();\n    }\n\n    /**\n     * Gets the information for the file attachment.\n     * @returns {Promise.<fileModel>} - A Promise that, when resolved, yields a {@link fileModel} containing the file information.\n     */\n    getInfo() {\n        return this._plug.at('info').get().then(fileModel.parse);\n    }\n\n    /**\n     * Delete the file attachment fron the page.\n     * @returns {Promise} - A Promise that, when resolved, indicates a successful delete operation.\n     */\n    delete() {\n        return this._plug.del();\n    }\n\n    /**\n     * Get the description of the file attachment.\n     * @returns {Promise.<String>} - A Promise that, when resolved, yields the file description.\n     */\n    getDescription() {\n        return this._plug.at('description').get();\n    }\n\n    /**\n     * Remove the description from the file attachment.\n     * @returns {Promise} - A Promise that, when resolved, indicates a successful removal.\n     */\n    clearDescription() {\n        return this._plug.at('description').del();\n    }\n\n    /**\n     * Update the description of the file attachment.\n     * @param {String} [description=''] - The new description to set.\n     * @returns {Promise.<fileModel>} - A Promise that, when resolved, yields a {@link fileModel} containing the file information.\n     */\n    updateDescription(description = '') {\n        return this._plug.at('description').put(description, utility.textRequestType).then(fileModel.parse);\n    }\n}\n"],"file":"pageFileBase.js","sourceRoot":"/source/"}
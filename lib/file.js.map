{"version":3,"names":[],"mappings":"","sources":["file.js"],"sourcesContent":["/**\n * Martian - Core JavaScript API for MindTouch\n *\n * Copyright (c) 2015 MindTouch Inc.\n * www.mindtouch.com  oss@mindtouch.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Plug} from './utility/plug';\nimport {utility} from './utility/utility';\nimport {fileModel} from './models/file.model';\nimport {fileRevisionsModel} from './models/fileRevisions.model';\n\n/**\n * A class for working with file attachments within the MindTouch site.\n */\nexport class File {\n\n    /**\n     * Construct a new File object.\n     * @param {Number} id - The resource ID of the file.\n     * @param {Settings} [settings] - The {@link Settings} information to use in construction. If not supplied, the default settings are used.\n     */\n    constructor(id, settings) {\n        this._plug = new Plug(settings).at('@api', 'deki', 'files', id).withParam('draft', true);\n    }\n\n    /**\n     * Get the file attachment information.\n     * @returns {Promise.<fileModel>} - A Promise that, when resolved, yields a {@link fileModel} containing the attachment information.\n     */\n    getInfo() {\n        return this._plug.at('info').get().then(fileModel.parse);\n    }\n\n    /**\n     * Get the revision list of the file attachment.\n     * @returns {Promise.<fileRevisionsModel>} - A Promise that, when resolved, yields a {@link fileRevisionsModel} containing the revision listing.\n     */\n    getRevisions() {\n        return this._plug.at('revisions').get().then(fileRevisionsModel.parse);\n    }\n\n    /**\n     * Set the description for the file.\n     * @param {String} description - The new file description.\n     * @returns {Promise.<fileModel>} - A Promise that, when resolved, yields a {@link fileModel} containing the file information.\n     */\n    setDescription(description) {\n        return this._plug.at('description').put(description, utility.textRequestType).then(fileModel.parse);\n    }\n\n    /**\n     * Delete the file from the MindTouch site.\n     * @returns {Promise} - A Promise that, when resolved, indicates a successful file deletion.\n     */\n    delete() {\n        return this._plug.delete();\n    }\n}\n"],"file":"file.js","sourceRoot":"/source/"}
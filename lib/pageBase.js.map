{"version":3,"names":[],"mappings":"","sources":["pageBase.js"],"sourcesContent":["/**\n * Martian - Core JavaScript API for MindTouch\n *\n * Copyright (c) 2015 MindTouch Inc.\n * www.mindtouch.com  oss@mindtouch.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {utility} from './utility/utility';\nimport {modelHelper} from './models/modelHelper';\nimport {pageModel} from './models/page.model';\nimport {pageContentsModel} from './models/pageContents.model';\nimport {pageTagsModel} from './models/pageTags.model';\nimport {pageFilesModel} from './models/pageFiles.model';\nimport {pageEditModel} from './models/pageEdit.model';\nimport {relatedPagesModel} from './models/relatedPages.model';\nfunction _handleVirtualPage(error) {\n    if(error.errorCode === 404 && error.response && error.response['@virtual']) {\n        return Promise.resolve(pageModel.parse(error.response));\n    }\n    throw error;\n}\nexport class PageBase {\n    constructor(id) {\n        if(this.constructor.name === 'PageBase') {\n            throw new TypeError('PageBase must not be constructed directly.  Use one of Page() or Draft()');\n        }\n        this._id = utility.getResourceId(id, 'home');\n    }\n    getFullInfo() {\n        return this._plug.get().then(pageModel.parse).catch(_handleVirtualPage);\n    }\n    getContents(params) {\n        return this._plug.at('contents').withParams(params).get().then(pageContentsModel.parse);\n    }\n    setContents(contents, params = {}) {\n        if(typeof contents !== 'string') {\n            return Promise.reject(new Error('Contents should be string.'));\n        }\n        let contentsParams = {\n            edittime: 'now'\n        };\n        Object.keys(params).forEach((key) => {\n            contentsParams[key] = params[key];\n        });\n        return this._plug.at('contents').withParams(contentsParams).post(contents, 'text/plain; charset=utf-8').then(pageEditModel.parse);\n    }\n    getFiles(params = {}) {\n        return this._plug.at('files').withParams(params).get().then(pageFilesModel.parse);\n    }\n    getOverview() {\n        return this._plug.at('overview').get().then(JSON.parse).then((overview) => {\n            return Promise.resolve({ overview: modelHelper.getString(overview) });\n        }).catch(() => {\n            return Promise.reject('Unable to parse the page overview response');\n        });\n    }\n    setOverview(options = {}) {\n        if(!('body' in options)) {\n            return Promise.reject(new Error('No overview body was supplied'));\n        }\n        let request = `<overview>${options.body}</overview>`;\n        return this._plug.at('overview').put(request);\n    }\n    getTags() {\n        return this._plug.at('tags').get().then(pageTagsModel.parse);\n    }\n    getDiff() {\n        throw new Error('Page.getDiff() is not implemented');\n    }\n    getRelated() {\n        return this._plug.at('related').get().then(relatedPagesModel.parse);\n    }\n}\n"],"file":"pageBase.js","sourceRoot":"/source/"}
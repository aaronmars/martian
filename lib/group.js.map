{"version":3,"names":[],"mappings":"","sources":["group.js"],"sourcesContent":["/**\n * Martian - Core JavaScript API for MindTouch\n *\n * Copyright (c) 2015 MindTouch Inc.\n * www.mindtouch.com  oss@mindtouch.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Plug} from './utility/plug';\nimport {utility} from './utility/utility';\nimport {groupModel} from './models/group.model';\nimport {groupListModel} from './models/groupList.model';\nimport {userListModel} from './models/userList.model';\n\n/**\n * A class for managing a single group of users.\n */\nexport class Group {\n\n    /**\n     * Construct a new Group object.\n     * @param {Number|String} id - The integer group ID, or the group name string.\n     * @param {Settings} [settings] - The {@link Settings} information to use in construction. If not supplied, the default settings are used.\n     */\n    constructor(id, settings) {\n        if(!id) {\n            throw new Error('A group ID must be supplied');\n        }\n        this._id = utility.getResourceId(id);\n        this._groupPlug = new Plug(settings).at('@api', 'deki', 'groups', this._id);\n    }\n\n    /**\n     * Get the group information.\n     * @returns {Promise.<groupModel>} - A Promise that, when resolved, yields a {@link groupModel} containing the group information.\n     */\n    getInfo() {\n        return this._groupPlug.get().then(groupModel.parse);\n    }\n\n    /**\n     * Get a list of optionally-filtered group users.\n     * @param {Object} options - The filtering options for fetching the listing.\n     * @param {String} [options.usernamefilter] - Search for users by name or part of a name.\n     * @param {Number} [options.offset=0] - Number of items to skip. Must be a positive number or 0 to not skip any.\n     * @param {Number|String} [options.limit=100] - Maximum number of items to retrieve. Must be a positive number or 'all' to retrieve all items.\n     * @param {Boolean} [options.activatedfilter] - Search for users by their active status.\n     * @param {String} [options.rolefilter] - Search for users by a role name.\n     * @param {String} [options.sortby] - Sort field. Prefix value with '-' to sort descending. Valid values are: `id`, `username`, `nick`, `email`, `fullname`, `date.lastlogin`, `status`, `role`, `service`\n     * @returns {Promise.<userListModel>} - A Promise that, when resolved, yields a {@link userListModel} with the users listing.\n     */\n    getUsers(options) {\n        return this._groupPlug.at('users').withParams(options).get().then(userListModel.parse);\n    }\n}\n\n/**\n * A class to manage the groups defined on the MindTouch site.\n */\nexport class GroupManager {\n\n    /**\n     * Construct a GroupManager object.\n     * @param {Settings} [settings] - The {@link Settings} information to use in construction. If not supplied, the default settings are used.\n     */\n    constructor(settings) {\n        this.plug = new Plug(settings).at('@api', 'deki', 'groups');\n        this.settings = settings;\n    }\n\n    /**\n     * Get the listing of all of the groups defined on the site.\n     * @returns {Promise.<groupListModel>} - A Promise that, when resolved, yields a {@link groupListModel} containing the group listing.\n     */\n    getGroupList() {\n        return this.plug.get().then(groupListModel.parse);\n    }\n\n    /**\n     * Get a Group object based on ID.\n     * @param {Number|String} id - The integer group ID, or the group name string.\n     * @returns {Group} - A new {@link Group} object for managing the group.\n     */\n    getGroup(id) {\n        return new Group(id, this.settings);\n    }\n}\n"],"file":"group.js","sourceRoot":"/source/"}
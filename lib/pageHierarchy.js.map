{"version":3,"names":[],"mappings":"","sources":["pageHierarchy.js"],"sourcesContent":["/**\n * Martian - Core JavaScript API for MindTouch\n *\n * Copyright (c) 2015 MindTouch Inc.\n * www.mindtouch.com  oss@mindtouch.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Plug} from './utility/plug';\nimport {pageModel} from './models/page.model';\nimport {subpagesModel} from './models/subpages.model';\n\n/**\n * A class for fetching hierarchy information.\n */\nexport class PageHierarchy {\n\n    /**\n     * Construct a new PageHierarchy object.\n     * @param {Array} [articleTypes=[]] - An array of article types to filter by when fetching pages in the hierarchy.\n     * @param {Settings} [settings] - The {@link Settings} information to use in construction. If not supplied, the default settings are used.\n     */\n    constructor(articleTypes = [], settings) {\n        this.filterByArticleTypes = articleTypes;\n        this._plug = new Plug(settings).at('@api', 'deki', 'pages');\n    }\n\n    /**\n     * Get the root of the hierarchy based on the page with {@see id}.\n     * @param {Number|String} [id='home'] - The identifier of the page to use as the hierarchy root.\n     * @returns {Promise.<pageModel>} - A Promise that, when resolved, yields a {@link pageModel} containing the root page information.\n     */\n    getRoot(id = 'home') {\n        return this._plug.at(id).get().then(pageModel.parse);\n    }\n\n    /**\n     * Get children of the page as an Array.\n     * @param {Number|String} [id='home'] - The identifier of the page to use as the hierarchy root.\n     * @returns {Promise.<Array>} - A Promise that, when resolved, yields the array of child pages of the identified root.\n     */\n    getChildren(id = 'home') {\n        let subpagesPlug = this._plug.at(id, 'subpages');\n        if(this.filterByArticleTypes.length > 0) {\n            subpagesPlug = subpagesPlug.withParam('article', this.filterByArticleTypes.join(','));\n        }\n        return subpagesPlug.get().then(subpagesModel.parse).then((spModel) => {\n            return spModel.pageSubpage || [];\n        });\n    }\n\n    /**\n     * Gets a root page and its children.\n     * @param {Number|String} [id='home'] - The identifier of the page to use as the hierarchy root.\n     * @param {Boolean} [asArray=true] - Force the result to be wrapped as an Array.\n     * @returns {Promise.<Array|Object>} - A Promise that, when resolved, yields an Object or Array, depending on the value of {@see asArray}.\n     */\n    getRootAndChildren(id, asArray = true) {\n        return Promise.all([\n            this.getRoot(id),\n            this.getChildren(id)\n        ]).then(([ root, children ]) => {\n            root.subpages = children.length > 0;\n            if(asArray) {\n                root = [ root ];\n            }\n            return root;\n        });\n    }\n}\n"],"file":"pageHierarchy.js","sourceRoot":"/source/"}
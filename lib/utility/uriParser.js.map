{"version":3,"names":[],"mappings":"","sources":["utility/uriParser.js"],"sourcesContent":["/**\n * Martian - Core JavaScript API for MindTouch\n *\n * Copyright (c) 2015 MindTouch Inc.\n * www.mindtouch.com  oss@mindtouch.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst uriParser = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+:))?(?:\\/\\/)?(?:([^:@\\/]*)(?::([^:@\\/]*))?@)?(\\[[0-9a-fA-F.]+\\]|[^:\\/?#]*)(?::(\\d+|(?=:)))?((?:[^?#](?![^?#\\/]*\\.(?:[?#]|$)))*\\/?)?[^?#\\/]*(?:(\\?[^#]*))?(?:(#.*))?/;\nfunction _parseUri(str) {\n    var parserKeys = [ 'href', 'protocol', 'username', 'password', 'hostname', 'port', 'pathname', 'search', 'hash' ];\n    var m = uriParser.exec(str);\n    var parts = {};\n    parserKeys.forEach(function(key, i) {\n        parts[key] = m[i];\n    });\n    return parts;\n}\nfunction _searchStringToParams(search) {\n    let params = [];\n    let queryEntries = search.split('&');\n    queryEntries.forEach((entry) => {\n        let kvp = entry.split('=');\n        params.push([ kvp[0], kvp[1] ]);\n    });\n    return params;\n}\nexport class UriSearchParams {\n    constructor(searchString) {\n        this.params = [];\n        if(searchString && searchString !== '') {\n            if(searchString[0] === '?') {\n                searchString = searchString.slice(1);\n            }\n            this.params = _searchStringToParams(searchString);\n        }\n    }\n    append(name, value) {\n        this.params.push([ name, value ]);\n    }\n    delete(name) {\n        let newParams = [];\n        this.params.forEach((pair) => {\n            if(pair[0] !== name) {\n                newParams.push(pair);\n            }\n        });\n        this.params = newParams;\n    }\n    get(name) {\n        let found = null;\n        for(let i = 0; i < this.params.length; i++) {\n            if(this.params[i][0] === name) {\n                found = this.params[i][1];\n                break;\n            }\n        }\n        return found;\n    }\n    getAll(name) {\n        let found = [];\n        this.params.forEach((param) => {\n            if(param[0] === name) {\n                found.push(param[1]);\n            }\n        });\n        return found;\n    }\n    has(name) {\n        let found = false;\n        for(let i = 0; i < this.params.length; i++) {\n            if(this.params[i][0] === name) {\n                found = true;\n                break;\n            }\n        }\n        return found;\n    }\n    set(name, value) {\n        let found = false;\n        let result = [];\n        this.params.forEach((pair) => {\n            if(pair[0] === name && !found) {\n                pair[1] = value;\n                result.push(pair);\n                found = true;\n            } else if(pair[0] !== name) {\n                result.push(pair);\n            }\n        });\n        this.params = result;\n    }\n    get entries() {\n        return this.params;\n    }\n    toString() {\n        return this.params.reduce((previous, current, index) => {\n            return `${previous}${index === 0 ? '' : '&'}${current[0]}=${current[1]}`;\n        }, '');\n    }\n}\nexport class UriParser {\n    constructor(urlString = '') {\n        if(typeof urlString !== 'string') {\n            throw new TypeError('Failed to construct \\'URL\\': The supplied URL must be a string');\n        }\n        let parts = _parseUri(urlString);\n        let protocolExists = typeof parts.protocol !== 'undefined' && parts.protocol !== '';\n        let hostExists = typeof parts.hostname !== 'undefined' && parts.hostname !== '';\n        if((protocolExists && !hostExists) || (!protocolExists && hostExists)) {\n            throw new TypeError('Failed to construct \\'URL\\': Protocol and hostname must be supplied together');\n        }\n        if(!protocolExists && !hostExists) {\n            this.hostless = true;\n        }\n        this.parts = parts;\n        this.params = new UriSearchParams(this.parts.search);\n    }\n\n    // Properties that come directly from the regex\n    get protocol() {\n        return this.parts.protocol.toLowerCase();\n    }\n    set protocol(val) {\n        this.parts.protocol = val;\n    }\n    get hostname() {\n        return this.parts.hostname;\n    }\n    set hostname(val) {\n        this.parts.hostname = val;\n    }\n    get port() {\n        return this.parts.port || '';\n    }\n    set port(val) {\n        this.parts.port = val;\n    }\n    get pathname() {\n        return this.parts.pathname || '/';\n    }\n    set pathname(val) {\n        this.parts.pathname = val;\n    }\n    get search() {\n        return this.params.entries.length === 0 ? '' : `?${this.params.toString()}`;\n    }\n    set search(val) {\n        this.parts.search = val;\n        this.params = new UriSearchParams(val);\n    }\n    get hash() {\n        return this.parts.hash || '';\n    }\n    set hash(val) {\n        this.parts.hash = val;\n    }\n    get username() {\n        return this.parts.username || '';\n    }\n    set username(val) {\n        this.parts.username = val;\n    }\n    get password() {\n        return this.parts.password || '';\n    }\n    set password(val) {\n        this.parts.password = val;\n    }\n\n    // Properties computed from various regex parts\n    get href() {\n        return this.toString();\n    }\n    set href(val) {\n        this.parts = _parseUri(val);\n        this.search = this.parts.search;\n    }\n    get host() {\n        let host = this.hostname.toLowerCase();\n        if(this.port) {\n            host = `${host}:${this.port}`;\n        }\n        return host;\n    }\n    set host(val) {\n        let hostParts = val.split(':');\n        this.hostname = hostParts[0];\n        if(hostParts.length > 1) {\n            this.port = hostParts[1];\n        } else {\n            this.port = '';\n        }\n    }\n    get origin() {\n        return `${this.protocol}//${this.host}`;\n    }\n    get searchParams() {\n        return this.params;\n    }\n    set searchParams(val) {\n        this.params = val;\n        this.parts.search = `?${val.toString()}`;\n    }\n    toString() {\n        var hrefString = '';\n        if(!this.hostless) {\n            hrefString = `${this.protocol}//`;\n            if(this.username && this.username !== '') {\n                hrefString = `${hrefString}${this.username}`;\n                if(this.password && this.password !== '') {\n                    hrefString = `${hrefString}:${this.password}`;\n                }\n                hrefString = `${hrefString}@`;\n            }\n        }\n        hrefString = `${hrefString}${this.host}${this.pathname}`;\n        if(this.search && this.search !== '') {\n            hrefString = `${hrefString}${this.search}`;\n        }\n        if(this.hash && this.hash !== '') {\n            hrefString = `${hrefString}${this.hash}`;\n        }\n        return hrefString;\n    }\n}\n"],"file":"utility/uriParser.js","sourceRoot":"/source/"}
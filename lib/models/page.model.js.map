{"version":3,"names":[],"mappings":"","sources":["models/page.model.js"],"sourcesContent":["/**\n * Martian - Core JavaScript API for MindTouch\n *\n * Copyright (c) 2015 MindTouch Inc.\n * www.mindtouch.com  oss@mindtouch.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {modelHelper} from './modelHelper';\nimport {pageRatingModel} from './pageRating.model';\nimport {userModel} from './user.model';\nlet pageModel = {\n    parse(data) {\n        let obj = modelHelper.fromJson(data);\n        let parsed = {\n            id: modelHelper.getInt(obj['@id']),\n            title: obj.title,\n            uriUi: obj['uri.ui']\n        };\n        modelHelper.addIfDefined(obj['@href'], 'href', parsed);\n        modelHelper.addIfDefined(obj['@state'], 'state', parsed);\n        modelHelper.addIfDefined(obj['@draft.state'], 'draftState', parsed);\n        modelHelper.addIfDefined(obj.article, 'article', parsed);\n        modelHelper.addIfDefined(obj.language, 'language', parsed);\n        modelHelper.addIfDefined(obj.namespace, 'namespace', parsed);\n        modelHelper.addIfDefined(obj['language.effective'], 'languageEffective', parsed);\n        modelHelper.addIfDefined(obj.timeuuid, 'timeuuid', parsed);\n        if('path' in obj) {\n            parsed.path = modelHelper.getString(obj.path);\n        }\n        if('@revision' in obj) {\n            parsed.revision = modelHelper.getInt(obj['@revision']);\n        }\n        if('date.created' in obj) {\n            parsed.dateCreated = modelHelper.getDate(obj['date.created']);\n        }\n        if('@deleted' in obj) {\n            parsed.deleted = modelHelper.getBool(obj['@deleted']);\n        }\n        if('@publish' in obj) {\n            parsed.publish = modelHelper.getBool(obj['@publish']);\n        }\n        if('@unpublish' in obj) {\n            parsed.unpublish = modelHelper.getBool(obj['@unpublish']);\n        }\n        if('@deactivate' in obj) {\n            parsed.deactivate = modelHelper.getBool(obj['@deactivate']);\n        }\n        if('@virtual' in obj) {\n            parsed.virtual = modelHelper.getBool(obj['@virtual']);\n        }\n        if('date.modified' in obj) {\n            parsed.dateModified = modelHelper.getDate(obj['date.modified']);\n        }\n        if('date.edited' in obj) {\n            parsed.dateEdited = modelHelper.getDate(obj['date.edited']);\n        }\n        if('page.parent' in obj) {\n            parsed.pageParent = pageModel._getParents(obj['page.parent']);\n        }\n        if('rating' in obj) {\n            parsed.rating = pageRatingModel.parse(obj.rating);\n        }\n        if('user.author' in obj) {\n            parsed.userAuthor = userModel.parse(obj['user.author']);\n        }\n\n        // TODO: Parse obj.files if defined\n        // TODO: Parse obj.content if defined\n        // TODO: Parse obj.properties if defined\n        // TODO: Parse obj['user.createdby'] if defined\n\n        // Only parse subpages if the property exists, and it has a 'page'\n        //  sub-property.\n        if('subpages' in obj && typeof obj.subpages !== 'string' && 'page' in obj.subpages) {\n            parsed.subpages = pageModel._getSubpages(obj.subpages);\n        }\n        return parsed;\n    },\n    _getParents(parent) {\n        return pageModel.parse(parent);\n    },\n    _getSubpages(subpages) {\n        let pageDef = subpages.page;\n        let parsed = [];\n        pageDef = modelHelper.getArray(pageDef);\n        pageDef.forEach((sp) => {\n            parsed.push(pageModel.parse(sp));\n        });\n        return parsed;\n    }\n};\nexport {pageModel};\n"],"file":"models/page.model.js","sourceRoot":"/source/"}
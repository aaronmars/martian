{"version":3,"names":[],"mappings":"","sources":["feedback.js"],"sourcesContent":["/**\n * Martian - Core JavaScript API for MindTouch\n *\n * Copyright (c) 2015 MindTouch Inc.\n * www.mindtouch.com  oss@mindtouch.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Plug} from './utility/plug';\nimport {utility} from './utility/utility';\nimport {stringUtility} from './utility/stringUtility';\nimport {pageRatingsModel} from './models/pageRatings.model';\n\n/**\n * A class to manage the page feedback and ratings for pages.\n */\nexport class FeedbackManager {\n\n    /**\n     * Construct a new FeedbackManager.\n     * @param {Settings} [settings] - The {@link Settings} information to use in construction. If not supplied, the default settings are used.\n     */\n    constructor(settings) {\n        this.plug = new Plug(settings).at('@api', 'deki');\n    }\n\n    /**\n     * Submit feedback for a page.\n     * @param {Object} options - Parameters to send along with the feedback.\n     * @param {String} options.userEmail - The email of the user sending feedback.\n     * @param {String} options.pageTitle - The display title of the page the feedback is in reference to.\n     * @param {String} options.siteUrl - The URL of the MindTouch site.\n     * @param {String} options.content - The body text ofd the feedback message input by the user.\n     * @param {Boolean} options.contactAllowed - Notifies the API whether or not the user grants permission to contact them.\n     * @returns {Promise} - A Promise that, when resolved, indicates a successful feedback submission.\n     */\n    submit(options) {\n        let path = options.path || stringUtility.leftTrim(window.location.pathname, '/');\n        let request = JSON.stringify({\n            _path: encodeURIComponent(path),\n            userEmail: options.userEmail,\n            pageTitle: options.pageTitle,\n            siteUrl: options.siteUrl,\n            content: options.content,\n            contactAllowed: options.contactAllowed\n        });\n        let plug = this.plug.at('workflow', 'submit-feedback');\n        return plug.post(request, utility.jsonRequestType);\n    }\n\n    /**\n     * Get the ratings that have been set for a series of pages.\n     * @param {Array} pageIds - The list of pages for which ratings data is fetched.\n     * @returns {Promise.<pageRatingsModel>} - A Promise that, when resolved, yields a {@link pageRatingsModel} object with the ratings information.\n     */\n    getRatingsForPages(pageIds) {\n        var ratingsPlug = this.plug.at('pages', 'ratings').withParams({ pageids: pageIds.join(',') });\n        return ratingsPlug.get().then(pageRatingsModel.parse);\n    }\n}\n"],"file":"feedback.js","sourceRoot":"/source/"}
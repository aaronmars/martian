{"version":3,"names":[],"mappings":"","sources":["userEvents.js"],"sourcesContent":["/**\n * Martian - Core JavaScript API for MindTouch\n *\n * Copyright (c) 2015 MindTouch Inc.\n * www.mindtouch.com  oss@mindtouch.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Plug} from './utility/plug';\nimport {utility} from './utility/utility';\nimport {userActivityModel} from './models/userActivity.model';\nimport {eventListModel} from './models/eventList.model';\nimport {eventDetailModel} from './models/eventDetail.model';\n\n/**\n * A class for fetching and managing events triggered by users.\n */\nexport class UserEvents {\n\n    /**\n     * Construct a new UserEvents object.\n     * @param {Settings} [settings] - The {@link Settings} information to use in construction. If not supplied, the default settings are used.\n     */\n    constructor(settings) {\n        this.settings = settings;\n        this.plug = new Plug(settings).at('@api', 'deki', 'events');\n    }\n\n    /**\n     * Get the user activity.\n     * @param {Number|String} userToken - A token that identifies the user from an event perspective.  It can be the user's numeric ID, username, or another system-defined token.\n     * @returns {Promise.<userActivityModel>} - A Promise that, when resolved, yields a {@link userActivityModel} containing the user's activity events.\n     */\n    getActivity(userToken) {\n        return this.plug.at('support-agent', userToken).get().then(userActivityModel.parse);\n    }\n\n    /**\n     * Get the user's history events.\n     * @param {Number|String} [userId='current'] - The user's numeric ID or username.\n     * @returns {Promise.<eventListModel>} - A Promise that, when resolved, yields a {@link eventListModel} that contains the listing of the user's events.\n     */\n    getHistory(userId) {\n        return this.plug.at('user-page', utility.getResourceId(userId, 'current')).get().then(eventListModel.parse);\n    }\n\n    /**\n     * Get the details of a specific user event.\n     * @param {Number|String} [userId='current'] - The user's numeric ID or username.\n     * @param {String} detailId - The detail ID of the event.\n     * @returns {Promise.<eventDetailModel>} - A Promise that, when resolved, yields a {@link eventDetailModel} that contains the event information.\n     */\n    getHistoryDetail(userId, detailId) {\n        return this.plug.at('user-page', utility.getResourceId(userId, 'current'), detailId).get().then(eventDetailModel.parse);\n    }\n\n    /**\n     * Log a search event that is performed by a specific user.\n     * @param {Number|String} [userId='current'] - The user's numeric ID or username.\n     * @param {Object} eventData - Specific data about the search that was performed.\n     * @returns {Promise} - A Promise that, when resolved, indicates a successful posting of the search event.\n     */\n    logSearch(userId, eventData) {\n        return this.plug.at('search', utility.getResourceId(userId, 'current')).post(JSON.stringify(eventData), utility.jsonRequestType);\n    }\n}\n"],"file":"userEvents.js","sourceRoot":"/source/"}